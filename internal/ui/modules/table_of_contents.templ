package modules

import "github.com/axzilla/templui/internal/components/icon"

type TableOfContentsItem struct {
	ID       string
	Text     string
	Children []TableOfContentsItem
}

type TableOfContentsProps struct {
	Items []TableOfContentsItem
}

templ TableOfContents(props TableOfContentsProps) {
	<aside
		class="text-sm"
		data-toc="container"
	>
		if len(props.Items) > 0 {
			<h4 class="mb-4 text-sm font-medium">On this page</h4>
			<nav class="mb-4">
				@renderTOCItems(props.Items, 0)
			</nav>
		}
		// Add your logo here
		<div class="mb-4 border border-border rounded-lg p-4 bg-muted/50 hover:bg-muted transition-colors duration-300">
			<h4 class="text-sm font-medium text-foreground mb-2">Your Logo Here</h4>
			<p class="text-xs text-muted-foreground mb-3">
				Join our showcase and connect with fellow developers.
			</p>
			<a href="https://twitter.com/axzilla_" target="_blank" class="inline-flex items-center text-xs font-medium text-primary hover:text-primary/80 transition-colors duration-300">
				Add Your Logo
				@icon.ChevronRight(icon.Props{Size: 16})
			</a>
		</div>
	</aside>
}

templ renderTOCItems(items []TableOfContentsItem, level int) {
	for _, item := range items {
		<div class={ templ.KV("ml-4", level > 0) }>
			<a
				href={ templ.SafeURL("#" + item.ID) }
				class="mb-2 block text-muted-foreground hover:text-foreground focus:text-foreground transition-colors"
				data-toc-link="true"
				data-section-id={ item.ID }
			>
				{ item.Text }
			</a>
			if len(item.Children) > 0 {
				@renderTOCItems(item.Children, level+1)
			}
		</div>
	}
}

templ TableOfContentsScript() {
	<script defer nonce={ templ.GetNonce(ctx) }>
        document.addEventListener('DOMContentLoaded', function() {
            // Find elements
            const tocContainer = document.querySelector('[data-toc="container"]');
            if (!tocContainer) return;
            
            const mainContent = document.querySelector('main.overflow-y-auto');
            if (!mainContent) return;
            
            const tocLinks = tocContainer.querySelectorAll('[data-toc-link]');
            if (!tocLinks.length) return;
            
            // Click handler for TOC links
            tocLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const sectionId = this.getAttribute('data-section-id');
                    const section = document.getElementById(sectionId);
                    
                    if (section) {
                        mainContent.scrollTo({
                            top: section.offsetTop - 100,
                            behavior: 'smooth'
                        });
                        // Set URL hash
                        history.replaceState(null, null, '#' + sectionId);
                    }
                });
            });
            
            // Check hash on load
            const initialHash = window.location.hash.replace('#', '');
            if (initialHash) {
                const initialSection = document.getElementById(initialHash);
                if (initialSection) {
                    setTimeout(() => {
                        mainContent.scrollTo({
                            top: initialSection.offsetTop - 100,
                            behavior: 'auto'
                        });
                    }, 0);
                }
            }
        });
    </script>
}
