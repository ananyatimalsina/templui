package sidebar

import "context"
import "github.com/templui/templui/internal/utils"
import "github.com/templui/templui/internal/components/icon"
import "github.com/templui/templui/internal/components/button"
import "github.com/templui/templui/internal/components/sheet"

type contextKey string

const sidebarIDKey contextKey = "sidebar-id"

type Side string

const (
	SideLeft  Side = "left" // default
	SideRight Side = "right"
)

type Variant string

const (
	VariantSidebar  Variant = "sidebar" // default
	VariantFloating Variant = "floating"
	VariantInset    Variant = "inset"
)

type Props struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Side       Side    // default: "left"
	Variant    Variant // default: "sidebar"
	Width      string  // default: "w-64"
	Collapsed  bool    // default: false (sidebar open)
}

type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type HeaderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type ContentProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type FooterProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type InsetProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type GroupProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type GroupLabelProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type MenuProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type MenuItemProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type MenuButtonProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Href       string
	IsActive   bool
}

type MenuBadgeProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type MenuSubProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type MenuSubItemProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type MenuSubButtonProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Href       string
	IsActive   bool
}

type SeparatorProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type LayoutProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

templ SidebarLayout(props ...LayoutProps) {
	{{ var p LayoutProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = utils.RandomID() }}
	}
	// Set sidebar ID in context for children to access
	{{ ctx = context.WithValue(ctx, sidebarIDKey, p.ID) }}
	<!-- Layout Container -->
	<div
		id={ p.ID }
		class={ utils.TwMerge(
			"flex min-h-svh relative",
			p.Class,
		) }
		data-tui-sidebar-layout
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Sidebar(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	// Get sidebar ID from context first (set by parent SidebarLayout)
	if ctxId := ctx.Value(sidebarIDKey); ctxId != nil {
		{{ p.ID = ctxId.(string) }}
	}
	// Only generate ID if not provided by context or props
	if p.ID == "" {
		{{ p.ID = utils.RandomID() }}
	}
	if p.Side == "" {
		{{ p.Side = SideLeft }}
	}
	if p.Variant == "" {
		{{ p.Variant = VariantSidebar }}
	}
	if p.Width == "" {
		{{ p.Width = "w-64" }}
	}
	// Use the sidebar's ID for mobile sheet and trigger targeting
	{{ var sidebarId string = p.ID }}
	<!-- Mobile: Sheet Component for < 768px -->
	{{ var sheetPosition sheet.Position }}
	if p.Side == SideRight {
		{{ sheetPosition = sheet.PositionRight }}
	} else {
		{{ sheetPosition = sheet.PositionLeft }}
	}
	@sheet.Content(sheet.ContentProps{
		ID:              sidebarId + "-mobile",
		Position:        sheetPosition,
		Class:           "md:hidden bg-sidebar text-sidebar-foreground p-0", // Only visible on mobile
		HideCloseButton: true,
	}) {
		<div class="flex h-full flex-col bg-sidebar text-sidebar-foreground">
			{ children... }
		</div>
	}
	<!-- Desktop: Sidebar for >= 768px -->
	<div class="group peer hidden md:flex" data-tui-sidebar-wrapper data-tui-sidebar-state="open" data-tui-sidebar-id={ p.ID } data-tui-sidebar-variant={ string(p.Variant) }>
		<!-- Gap element for document flow -->
		<div
			class={ utils.TwMerge(
				"flex-shrink-0 transition-[width] duration-200",
				p.Width,
				"group-data-[tui-sidebar-state=closed]:w-0",
				// Add padding for floating/inset variants when not collapsed
				utils.If(p.Variant == VariantFloating || p.Variant == VariantInset,
					"group-data-[tui-sidebar-state=open]:pr-2"),
			) }
		></div>
		<!-- Sidebar Container -->
		<aside
			id={ p.ID }
			class={ utils.TwMerge(
				"fixed inset-y-0 z-10 flex",
				p.Width,
				"transition-[transform,width] duration-200",
				utils.IfElse(p.Side == SideRight, "right-0", "left-0"),
				// Add padding for floating and inset variants
				utils.If(p.Variant == VariantFloating || p.Variant == VariantInset, "p-2"),
				"group-data-[tui-sidebar-state=open]:translate-x-0",
				utils.IfElse(p.Side == SideRight,
					"group-data-[tui-sidebar-state=closed]:translate-x-full",
					"group-data-[tui-sidebar-state=closed]:-translate-x-full"),
				p.Class,
			) }
			data-tui-sidebar="sidebar"
			data-tui-sidebar-variant={ string(p.Variant) }
			{ p.Attributes... }
		>
			<!-- Inner sidebar with variant-specific styling -->
			<div
				class={ utils.TwMerge(
					"w-full bg-sidebar text-sidebar-foreground h-full flex flex-col",
					// Floating variant: rounded corners, border, and shadow
					utils.If(p.Variant == VariantFloating,
						"rounded-lg border border-sidebar-border shadow-sm"),
					// Regular sidebar variant: side borders
					utils.If(p.Variant == VariantSidebar,
						utils.IfElse(p.Side == SideRight, "border-l border-sidebar-border", "border-r border-sidebar-border")),
				) }
			>
				{ children... }
			</div>
		</aside>
	</div>
}

templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	// Get sidebar ID from context (set by parent Sidebar component)
	{{ var sidebarId string }}
	if ctxId := ctx.Value(sidebarIDKey); ctxId != nil {
		{{ sidebarId = ctxId.(string) }}
	} else if attr, ok := p.Attributes["data-tui-sidebar-target"]; ok {
		// Fallback to attribute if not in context
		{{ sidebarId = attr.(string) }}
	}
	<!-- Mobile: Sheet Trigger -->
	@sheet.Trigger(sheet.TriggerProps{
		For:   sidebarId + "-mobile",
		Class: "md:hidden", // Only visible on mobile
	}) {
		@button.Button(button.Props{
			Size:    button.SizeIcon,
			Variant: button.VariantGhost,
			Class:   "size-7",
		}) {
			@icon.PanelLeft(icon.Props{Class: "size-4"})
			<span class="sr-only">Toggle Sidebar</span>
		}
	}
	<!-- Desktop: Sidebar Trigger -->
	<div class="hidden md:block">
		@button.Button(button.Props{
			Size:    button.SizeIcon,
			Variant: button.VariantGhost,
			Class: utils.TwMerge(
				"size-7",
				p.Class,
			),
			Attributes: utils.MergeAttributes(
				templ.Attributes{
					"data-tui-sidebar-trigger": true,
					"data-tui-sidebar-target":  sidebarId,
				},
				p.Attributes,
			)},
		) {
			@icon.PanelLeft(icon.Props{Class: "size-4"})
			<span class="sr-only">Toggle Sidebar</span>
		}
	</div>
}

templ Header(props ...HeaderProps) {
	{{ var p HeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("flex flex-col gap-2 p-2", p.Class) }
		data-tui-sidebar="header"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Footer(props ...FooterProps) {
	{{ var p FooterProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("flex flex-col gap-2 p-2", p.Class) }
		data-tui-sidebar="footer"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Content(props ...ContentProps) {
	{{ var p ContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden", p.Class) }
		data-tui-sidebar="content"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Menu(props ...MenuProps) {
	{{ var p MenuProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<ul
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("flex w-full min-w-0 flex-col gap-1", p.Class) }
		data-tui-sidebar="menu"
		{ p.Attributes... }
	>
		{ children... }
	</ul>
}

templ MenuItem(props ...MenuItemProps) {
	{{ var p MenuItemProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<li
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("group/menu-item relative", p.Class) }
		data-tui-sidebar="menu-item"
		{ p.Attributes... }
	>
		{ children... }
	</li>
}

templ MenuButton(props ...MenuButtonProps) {
	{{ var p MenuButtonProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.Href != "" {
		<a
			if p.ID != "" {
				id={ p.ID }
			}
			href={ templ.SafeURL(p.Href) }
			class={ utils.TwMerge(
				"flex w-full items-center gap-2 rounded-md p-2 text-sm text-left",
				"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				"transition-colors",
				utils.If(p.IsActive, "bg-sidebar-accent text-sidebar-accent-foreground font-medium"),
				p.Class,
			) }
			data-tui-sidebar="menu-button"
			if p.IsActive {
				data-active="true"
			}
			{ p.Attributes... }
		>
			{ children... }
		</a>
	} else {
		<button
			if p.ID != "" {
				id={ p.ID }
			}
			type="button"
			class={ utils.TwMerge(
				"flex w-full items-center gap-2 rounded-md p-2 text-sm text-left",
				"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				"transition-colors",
				utils.If(p.IsActive, "bg-sidebar-accent text-sidebar-accent-foreground font-medium"),
				p.Class,
			) }
			data-tui-sidebar="menu-button"
			if p.IsActive {
				data-active="true"
			}
			{ p.Attributes... }
		>
			{ children... }
		</button>
	}
}

templ MenuSub(props ...MenuSubProps) {
	{{ var p MenuSubProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<ul
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge(
			"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
			"group-data-[collapsible=icon]:hidden",
			p.Class,
		) }
		data-tui-sidebar="menu-sub"
		{ p.Attributes... }
	>
		{ children... }
	</ul>
}

templ MenuSubItem(props ...MenuSubItemProps) {
	{{ var p MenuSubItemProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<li
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("group/menu-sub-item relative", p.Class) }
		data-tui-sidebar="menu-sub-item"
		{ p.Attributes... }
	>
		{ children... }
	</li>
}

templ MenuSubButton(props ...MenuSubButtonProps) {
	{{ var p MenuSubButtonProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.Href != "" {
		<a
			if p.ID != "" {
				id={ p.ID }
			}
			href={ templ.SafeURL(p.Href) }
			class={ utils.TwMerge(
				"flex items-center gap-2 rounded-md px-2 py-1.5 text-sm",
				"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				"transition-colors",
				utils.If(p.IsActive, "bg-sidebar-accent text-sidebar-accent-foreground font-medium"),
				p.Class,
			) }
			data-tui-sidebar="menu-sub-button"
			if p.IsActive {
				data-active="true"
			}
			{ p.Attributes... }
		>
			{ children... }
		</a>
	} else {
		<button
			if p.ID != "" {
				id={ p.ID }
			}
			type="button"
			class={ utils.TwMerge(
				"flex w-full items-center gap-2 rounded-md px-2 py-1.5 text-sm text-left",
				"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				"transition-colors",
				utils.If(p.IsActive, "bg-sidebar-accent text-sidebar-accent-foreground font-medium"),
				p.Class,
			) }
			data-tui-sidebar="menu-sub-button"
			if p.IsActive {
				data-active="true"
			}
			{ p.Attributes... }
		>
			{ children... }
		</button>
	}
}

templ Inset(props ...InsetProps) {
	{{ var p InsetProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<main
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge(
			"relative flex w-full flex-1 flex-col bg-background",
			// Add special styling when peer sidebar has variant="inset"
			"md:peer-data-[tui-sidebar-variant=inset]:m-2",
			"md:peer-data-[tui-sidebar-variant=inset]:ml-0",
			"md:peer-data-[tui-sidebar-variant=inset]:rounded-xl",
			"md:peer-data-[tui-sidebar-variant=inset]:shadow-sm",
			// When sidebar is closed and variant is inset, add left margin back
			"md:peer-data-[tui-sidebar-variant=inset]:peer-data-[tui-sidebar-state=closed]:ml-2",
			p.Class,
		) }
		data-tui-sidebar="inset"
		{ p.Attributes... }
	>
		{ children... }
	</main>
}

templ Group(props ...GroupProps) {
	{{ var p GroupProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("relative flex w-full min-w-0 flex-col p-2", p.Class) }
		data-tui-sidebar="group"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ GroupLabel(props ...GroupLabelProps) {
	{{ var p GroupLabelProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge(
			"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70",
			"ring-sidebar-ring outline-none transition-[margin,opacity] duration-200 ease-linear",
			"focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
			"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
			p.Class,
		) }
		data-tui-sidebar="group-label"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ MenuBadge(props ...MenuBadgeProps) {
	{{ var p MenuBadgeProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge(
				"ml-auto flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium",
				"bg-sidebar-accent text-sidebar-accent-foreground",
				p.Class,
			) }
		data-tui-sidebar="menu-badge"
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Separator(props ...SeparatorProps) {
	{{ var p SeparatorProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<hr
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge(
			"mx-2 my-2 border-t border-sidebar-border",
			p.Class,
		) }
		data-tui-sidebar="separator"
		{ p.Attributes... }
	/>
}
