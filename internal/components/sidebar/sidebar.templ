package sidebar

import "github.com/templui/templui/internal/utils"
import "github.com/templui/templui/internal/components/icon"
import "github.com/templui/templui/internal/components/button"

// Main sidebar container props
type SidebarProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

// Sidebar trigger button props
type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

// Sidebar header props
type HeaderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

// Sidebar footer props
type FooterProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

// Sidebar content props
type ContentProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

// Sidebar menu props
type MenuProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

// Sidebar menu item props
type MenuItemProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

// Sidebar menu button props
type MenuButtonProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Href       string
	IsActive   bool
}

// Main sidebar container
templ Sidebar(props ...SidebarProps) {
	{{ var p SidebarProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = utils.RandomID() }}
	}
	<!-- Backdrop for mobile -->
	<div
		class="absolute inset-0 z-40 lg:hidden hidden"
		data-sidebar-backdrop
		data-sidebar-id={ p.ID }
	></div>
	<!-- Sidebar -->
	<aside
		id={ p.ID }
		class={ utils.TwMerge(
			// Base styles
			"h-full bg-sidebar text-sidebar-foreground border-r border-sidebar-border flex-shrink-0 transition-all duration-200",
			// Mobile: fixed width, absolute position, transform for show/hide
			"w-64 absolute inset-y-0 left-0 z-50",
			"transform -translate-x-full data-[sidebar-state=open]:translate-x-0",
			// Desktop: relative position, width changes
			"lg:relative lg:z-0 lg:translate-x-0",
			"lg:w-64 lg:data-[sidebar-state=closed]:w-0",
			// Hide overflow and border when closed on desktop
			"lg:data-[sidebar-state=closed]:overflow-hidden lg:data-[sidebar-state=closed]:border-0",
			p.Class,
		) }
		data-sidebar="sidebar"
		data-sidebar-state="closed"
		{ p.Attributes... }
	>
		<div class="flex h-full flex-col">
			{ children... }
		</div>
	</aside>
}

// Sidebar trigger button
templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	@button.Button(button.Props{
		Size:    button.SizeIcon,
		Variant: button.VariantGhost,
		Class: utils.TwMerge(
			"size-7",
			p.Class,
		),
		Attributes: utils.MergeAttributes(
			templ.Attributes{"data-sidebar-trigger": true},
			p.Attributes,
		)},
	) {
		@icon.PanelLeft(icon.Props{Class: "size-4"})
		<span class="sr-only">Toggle Sidebar</span>
	}
}

// Sidebar header
templ Header(props ...HeaderProps) {
	{{ var p HeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("flex items-center gap-2 px-4 py-3 border-b border-sidebar-border", p.Class) }
		data-sidebar="header"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

// Sidebar footer
templ Footer(props ...FooterProps) {
	{{ var p FooterProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("mt-auto px-4 py-3 border-t border-sidebar-border", p.Class) }
		data-sidebar="footer"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

// Sidebar content
templ Content(props ...ContentProps) {
	{{ var p ContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("flex-1 overflow-y-auto px-4 py-4", p.Class) }
		data-sidebar="content"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

// Sidebar menu container
templ Menu(props ...MenuProps) {
	{{ var p MenuProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<ul
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("space-y-1", p.Class) }
		data-sidebar="menu"
		{ p.Attributes... }
	>
		{ children... }
	</ul>
}

// Sidebar menu item
templ MenuItem(props ...MenuItemProps) {
	{{ var p MenuItemProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<li
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("", p.Class) }
		data-sidebar="menu-item"
		{ p.Attributes... }
	>
		{ children... }
	</li>
}

// Sidebar menu button
templ MenuButton(props ...MenuButtonProps) {
	{{ var p MenuButtonProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.Href != "" {
		<a
			if p.ID != "" {
				id={ p.ID }
			}
			href={ templ.SafeURL(p.Href) }
			class={ utils.TwMerge(
				"flex items-center gap-3 rounded-md px-3 py-2 text-sm",
				"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				"transition-colors",
				utils.If(p.IsActive, "bg-sidebar-accent text-sidebar-accent-foreground font-medium"),
				p.Class,
			) }
			data-sidebar="menu-button"
			if p.IsActive {
				data-active="true"
			}
			{ p.Attributes... }
		>
			{ children... }
		</a>
	} else {
		<button
			if p.ID != "" {
				id={ p.ID }
			}
			type="button"
			class={ utils.TwMerge(
				"flex w-full items-center gap-3 rounded-md px-3 py-2 text-sm text-left",
				"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
				"transition-colors",
				utils.If(p.IsActive, "bg-sidebar-accent text-sidebar-accent-foreground font-medium"),
				p.Class,
			) }
			data-sidebar="menu-button"
			if p.IsActive {
				data-active="true"
			}
			{ p.Attributes... }
		>
			{ children... }
		</button>
	}
}

// Sidebar inset props (main content wrapper)
type SidebarInsetProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

// SidebarInset - main content wrapper that adapts to sidebar state
templ SidebarInset(props ...SidebarInsetProps) {
	{{ var p SidebarInsetProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<main
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge(
			"flex-1",
			p.Class,
		) }
		data-sidebar="inset"
		{ p.Attributes... }
	>
		{ children... }
	</main>
}

