package sheet

import (
	"github.com/templui/templui/internal/utils"
	"github.com/templui/templui/internal/components/icon"
)

type Position string

const (
	PositionTop    Position = "top"
	PositionRight  Position = "right"
	PositionBottom Position = "bottom"
	PositionLeft   Position = "left"
)

type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	For        string // ID of the sheet to trigger
}

type ContentProps struct {
	ID              string
	Class           string
	Attributes      templ.Attributes
	Position        Position
	InitialOpen     bool
	HideCloseButton bool
}

type HeaderProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type FooterProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type TitleProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type DescriptionProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type CloseProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	For        string // ID of the sheet to close (optional, defaults to closest sheet)
}

templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("group cursor-pointer", p.Class) }
		if p.For != "" {
			data-tui-sheet-trigger={ p.For }
		}
		data-tui-sheet-open="false"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Content(props ...ContentProps) {
	{{ var p ContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.ID == "" {
		{{ p.ID = utils.RandomID() }}
	}
	<!-- Overlay -->
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class="fixed inset-0 z-50 bg-black/50 hidden"
		data-tui-sheet-backdrop
		data-tui-sheet-component="sheet"
		data-tui-sheet-open="false"
		if p.InitialOpen {
			data-tui-sheet-initial-open="true"
		}
	></div>
	<!-- Content -->
	<div
		id={ p.ID + "-content" }
		class={
			utils.TwMerge(
				"fixed z-50 bg-background shadow-lg transition ease-in-out hidden",
				utils.If(p.Position == PositionRight, "inset-y-0 right-0 h-full w-3/4 border-l sm:max-w-sm"),
				utils.If(p.Position == PositionLeft, "inset-y-0 left-0 h-full w-3/4 border-r sm:max-w-sm"),
				utils.If(p.Position == PositionTop, "inset-x-0 top-0 h-auto border-b"),
				utils.If(p.Position == PositionBottom, "inset-x-0 bottom-0 h-auto border-t"),
				p.Class,
			),
		}
		data-tui-sheet-content
		data-tui-sheet-position={ string(p.Position) }
		{ p.Attributes... }
	>
		<div class="flex flex-col gap-4 h-full overflow-y-auto">
			{ children... }
		</div>
		if !p.HideCloseButton {
			<button
				class="absolute top-4 right-4 z-10 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none"
				data-tui-sheet-close
				aria-label="Close"
			>
				@icon.X(icon.Props{Class: "h-4 w-4"})
				<span class="sr-only">Close</span>
			</button>
		}
	</div>
}

templ Header(props ...HeaderProps) {
	{{ var p HeaderProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("flex flex-col gap-1.5 p-4", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Title(props ...TitleProps) {
	{{ var p TitleProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<h2
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("text-foreground font-semibold", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</h2>
}

templ Description(props ...DescriptionProps) {
	{{ var p DescriptionProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<p
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("text-muted-foreground text-sm", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</p>
}

templ Footer(props ...FooterProps) {
	{{ var p FooterProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("mt-auto flex flex-col gap-2 p-4", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Close(props ...CloseProps) {
	{{ var p CloseProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		class={ utils.TwMerge("contents", p.Class) }
		if p.For != "" {
			data-tui-sheet-close={ p.For }
		} else {
			data-tui-sheet-close
		}
		{ p.Attributes... }
	>
		{ children... }
	</span>
}
