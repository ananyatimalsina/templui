package timepicker

import (
	"fmt"
	"github.com/templui/templui/internal/components/button"
	"github.com/templui/templui/internal/components/card"
	"github.com/templui/templui/internal/components/icon"
	"github.com/templui/templui/internal/components/popover"
	"github.com/templui/templui/internal/utils"
	"time"
)

type Props struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Name        string
	Value       time.Time
	Use12Hours  bool
	AMLabel     string
	PMLabel     string
	Placeholder string
	Required    bool
	Disabled    bool
	HasError    bool
}

templ TimePicker(props ...Props) {
	{{
		var p Props
		if len(props) > 0 {
			p = props[0]
		}
		if p.ID == "" {
			p.ID = utils.RandomID()
		}
		if p.Name == "" {
			p.Name = p.ID
		}
		if p.Placeholder == "" {
			p.Placeholder = "Select time"
		}
		if p.AMLabel == "" {
			p.AMLabel = "AM"
		}
		if p.PMLabel == "" {
			p.PMLabel = "PM"
		}

		var contentID = p.ID + "-content"
		var valueString string
		if p.Value != (time.Time{}) {
			valueString = p.Value.Format("15:04")
		}
	}}
	@popover.Trigger(popover.TriggerProps{For: contentID}) {
		@button.Button(button.Props{
			ID:      p.ID,
			Variant: button.VariantOutline,
			Class: utils.TwMerge(
				// Base styles matching input
				"w-full h-9 px-3 py-1 text-base md:text-sm",
				"flex items-center justify-between",
				"rounded-md border border-input bg-transparent shadow-xs transition-[color,box-shadow] outline-none",
				// Dark mode background
				"dark:bg-input/30",
				// Selection styles
				"selection:bg-primary selection:text-primary-foreground",
				// Focus styles
				"focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
				// Error/Invalid styles
				"aria-invalid:ring-destructive/20 aria-invalid:border-destructive dark:aria-invalid:ring-destructive/40",
				utils.If(p.HasError, "border-destructive ring-destructive/20 dark:ring-destructive/40"),
				p.Class,
			),
			Disabled: p.Disabled,
			Attributes: utils.MergeAttributes(p.Attributes, templ.Attributes{
				"data-tui-timepicker":             "true",
				"data-tui-timepicker-use12hours":  fmt.Sprintf("%t", p.Use12Hours),
				"data-tui-timepicker-am-label":    p.AMLabel,
				"data-tui-timepicker-pm-label":    p.PMLabel,
				"data-tui-timepicker-placeholder": p.Placeholder,
				"aria-invalid":                    utils.If(p.HasError, "true"),
			}),
		}) {
			<span data-tui-timepicker-display class="text-left grow text-muted-foreground">
				{ p.Placeholder }
			</span>
			<span class="text-muted-foreground flex items-center ml-2">
				@icon.Clock(icon.Props{Size: 16})
			</span>
		}
	}
	@popover.Content(popover.ContentProps{
		ID:        contentID,
		Placement: popover.PlacementBottomStart,
		Class:     "p-0 w-80",
	}) {
		@card.Card(card.Props{
			Class: "border-0 shadow-none",
		}) {
			@card.Content(card.ContentProps{
				Class: "p-4",
			}) {
				<div
					data-tui-timepicker-popup="true"
					data-tui-timepicker-input-name={ p.Name }
					if valueString != "" {
						data-tui-timepicker-value={ valueString }
					}
				>
					// Hidden input for form submission
					<input
						type="hidden"
						name={ p.Name }
						value={ valueString }
						required?={ p.Required }
						data-tui-timepicker-hidden-input="true"
					/>
					// Time selection grid
					<div class="grid grid-cols-2 gap-3 mb-4">
						// Hour selection
						<div class="space-y-2">
							<label class="text-sm font-medium">Hour</label>
							<div class="max-h-32 overflow-y-auto border rounded-md bg-background">
								<div data-tui-timepicker-hour-list="true" class="p-1">
									// Hours will be populated by JavaScript
								</div>
							</div>
						</div>
						// Minute selection
						<div class="space-y-2">
							<label class="text-sm font-medium">Minute</label>
							<div class="max-h-32 overflow-y-auto border rounded-md bg-background">
								<div data-tui-timepicker-minute-list="true" class="p-1">
									// Minutes will be populated by JavaScript
								</div>
							</div>
						</div>
					</div>
					// AM/PM selector and action buttons
					<div class="flex justify-between items-center">
						if p.Use12Hours {
							<div class="flex gap-1">
								<button
									type="button"
									data-tui-timepicker-period="AM"
									class="px-3 py-1 text-sm rounded-md border hover:bg-muted transition-colors"
								>
									{ p.AMLabel }
								</button>
								<button
									type="button"
									data-tui-timepicker-period="PM"
									class="px-3 py-1 text-sm rounded-md border hover:bg-muted transition-colors"
								>
									{ p.PMLabel }
								</button>
							</div>
						} else {
							<div></div>
						}
						@button.Button(button.Props{
							Type:    "button",
							Variant: button.VariantSecondary,
							Size:    button.SizeSm,
							Attributes: templ.Attributes{
								"data-tui-timepicker-done": "true",
							},
						}) {
							Done
						}
					</div>
				</div>
			}
		}
	}
}
